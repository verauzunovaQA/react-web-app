{"version":3,"sources":["storage.ts","TodoList.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["storeInput","key","value","localStorage","setItem","JSON","stringify","parse","getItem","TodoList","todoData","get","inputEl","useRef","useState","todos","setTodos","newtodo","setNewTodo","setAndSortTodos","addToStorage","sortedTodos","sort","a","b","isDone","add","createTodo","trim","length","newTodos","id","uuidv4","isEditing","current","focus","editTodo","map","todoItem","isKeyEnter","type","onKeyUp","event","onChange","e","target","ref","autoFocus","disabled","onClick","className","val","onClickDone","onChangeExistingTodoItem","onClickEdit","filter","valueItem","onClickRemove","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e89e3b5d.chunk.js","sourcesContent":["class StoreInput{\n    add(key:string, value:any){\n        localStorage.setItem(key, JSON.stringify(value))\n    }\n\n    get(key:string):any{\n        return JSON.parse(localStorage.getItem(key) as string)\n    }\n}\n\nexport const storeInput= new StoreInput()","import { useRef, useState } from \"react\";\nimport { v4 as uuidv4 } from 'uuid';\nimport { storeInput } from \"./storage\";\nimport './TodoList.css';\n\ninterface TodoItem{\n    id:string\n    value:string\n    isEditing:boolean\n    isDone:boolean\n}\n\nfunction TodoList(){\n    const todoData= storeInput.get(\"todos\") ?? []\n    const inputEl = useRef<HTMLInputElement>(null);\n    const [todos, setTodos] = useState<TodoItem[]>(todoData)\n    const [newtodo, setNewTodo] = useState<string>(\"\")\n    const onClickButton = (e: any) => {\n        createTodo()\n    }\n    const onChangeNewTodoItem = (e: any) => {\n        setNewTodo(e.target.value)\n    }\n    const onChangeExistingTodoItem = (e: any, id: string) => {\n        if(e.target.value.trim().length === 0){\n            return\n        }\n        const newTodos = todos.map( (todoItem) => todoItem.id === id ? {...todoItem, value: e.target.value} : todoItem)\n        setAndSortTodos(newTodos)\n    }\n    const onClickRemove = (val: string) => {\n        const newTodos = todos.filter( (valueItem) => valueItem.id !== val)\n        setAndSortTodos(newTodos)\n    }\n    const onClickEdit = (id: string) => {\n        const newTodos = todos.map( (todoItem) => todoItem.id === id ? {...todoItem, isEditing:true} : todoItem)\n        setAndSortTodos(newTodos, false)\n    }\n    const onClickSave = (id:string) =>{\n        editTodo(id)\n    }\n    const onClickDone = (id:string) =>{\n        const newTodos = todos.map( (todoItem) => todoItem.id === id ? {...todoItem, isDone:!todoItem.isDone} : todoItem)\n        setAndSortTodos(newTodos)\n    }\n    const setAndSortTodos = (todos:TodoItem[], addToStorage=true) =>{\n        const sortedTodos = todos.sort((a,b) => {\n            if (a.isDone && !b.isDone){\n                return 1\n            }else if(!a.isDone && b.isDone){\n                return -1\n            }\n            return 0\n        })\n        if(addToStorage){\n            storeInput.add(\"todos\", sortedTodos)\n        }\n        setTodos(sortedTodos)\n    }\n    const createTodo = () =>{\n        if(newtodo.trim().length === 0){\n            return\n        }\n        const newTodos = [...todos, {id:uuidv4(),value:newtodo,isEditing:false,isDone:false}]\n        setAndSortTodos(newTodos)\n        setNewTodo(\"\")\n        if(inputEl.current){\n            inputEl.current.focus() \n        }\n    }\n    const editTodo = (id:string) => {\n        const newTodos = todos.map( (todoItem) => todoItem.id === id ? {...todoItem, isEditing:false} : todoItem)\n        setAndSortTodos(newTodos)\n    }\n\n    const onKeyUp = (event:React.KeyboardEvent<HTMLInputElement>) => {\n        if(isKeyEnter(event.key)){\n            createTodo()\n        }\n    }\n\n    const onKeyUpEdit = (event:React.KeyboardEvent<HTMLInputElement>, id:string) => {\n        if(isKeyEnter(event.key)){\n            editTodo(id)\n        }\n    }\n\n    const isKeyEnter = (key:string) => {\n        return key === 'Enter'\n    }\n\n    return (\n        <div>\n            <input type=\"text\" onKeyUp={onKeyUp} onChange={onChangeNewTodoItem} value={newtodo} ref={inputEl} autoFocus/> \n            <input type=\"submit\" disabled={newtodo.trim().length===0} onClick={onClickButton} value=\"submit\"/>\n            <ul className = \"padding-elements\">\n                { \n                    todos.map( val => <li className = \"todo-separate-items\" key={val.id}>\n                        <span className = {`todo-item-status-icon${val.isDone ? ' is-done':''}`} onClick={ () => onClickDone(val.id)}>\n                            </span> \n                        {val.isEditing \n                            ? <>\n                                <input className = \"input-field\" type=\"text\" onKeyUp={(e) => onKeyUpEdit(e,val.id)} value={val.value} onChange={ (e) => onChangeExistingTodoItem(e, val.id)} autoFocus/> \n                                <button className = \"todo-button save-button\" onClick={() => onClickSave(val.id)}>save</button>\n                              </>\n                            : <>\n                                {val.value} {' '}\n                                <button className = \"todo-button\" onClick={ () => onClickEdit(val.id)}>edit</button>\n                                {' '}\n                                <button className = \"todo-button\" onClick={ () => onClickRemove(val.id)}>remove</button>\n                              </>\n                        }    \n                    </li>) \n                 }\n            </ul>\n        </div> \n\n    ) ;\n\n}\n\nexport default TodoList;","import './App.css';\nimport TodoList from './TodoList';\n\nfunction App() {\n  return (\n    <div>\n      <header className=\"App-header\">\n        <h1>ToDoList</h1>\n        <TodoList />\n                \n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}