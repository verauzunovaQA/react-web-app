{"version":3,"sources":["storage.ts","TodoItem.tsx","TodoList.tsx","repository.ts","TodoPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["storeInput","key","value","localStorage","setItem","JSON","stringify","parse","getItem","TodoItem","props","className","todoItem","isDone","onClick","onClickDone","id","isEditing","type","onKeyUp","e","onKeyUpEdit","onChange","onChangeExistingTodoItem","currentTarget","autoFocus","onClickSave","to","onClickEdit","onClickRemove","TodoList","todoData","get","inputEl","useRef","useState","todos","setTodos","newtodo","setNewTodo","newValue","trim","length","newTodos","map","setAndSortTodos","val","filter","valueItem","editTodo","updatedAt","Date","toISOString","addToStorage","sortedTodos","sort","a","b","add","createTodo","uuidv4","createdAt","current","focus","isKeyEnter","event","target","ref","disabled","repository","find","TodoPage","todoId","useParams","getById","moment","format","App","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dfadda18.chunk.js","sourcesContent":["class StoreInput{\n    add(key:string, value:any){\n        localStorage.setItem(key, JSON.stringify(value))\n    }\n\n    get(key:string):any{\n        return JSON.parse(localStorage.getItem(key) as string)\n    }\n}\n\nexport const storeInput= new StoreInput()","import { Link } from \"react-router-dom\";\n\nexport interface TodoItemObj{\n    id:string\n    value:string\n    isEditing:boolean\n    isDone:boolean\n    createdAt:string\n    updatedAt:string\n}\n\ninterface Props{\n    todoItem:TodoItemObj\n    onClickDone:(id:string) => void\n    onKeyUpEdit:(key:string, id:string) => void\n    onChangeExistingTodoItem:(newValue:string, id:string) => void\n    onClickSave:(id:string) => void\n    onClickEdit:(id:string) => void\n    onClickRemove:(id:string) => void\n}\n\nexport function TodoItem(props:Props){\n    return(\n        <li className = \"todo-separate-items\">\n            <span className = {`todo-item-status-icon${props.todoItem.isDone ? ' is-done':''}`} data-testid = 'todo-item-toggle-done' onClick={ () => props.onClickDone(props.todoItem.id)}>\n            </span> \n            {props.todoItem.isEditing \n                ? <>\n                    <input className = \"input-field\" data-testid = \"todo-item-change-existing-item\" type=\"text\" onKeyUp={(e) => props.onKeyUpEdit(e.key, props.todoItem.id)} value={props.todoItem.value} onChange={ (e) => props.onChangeExistingTodoItem(e.currentTarget.value, props.todoItem.id)} autoFocus/> \n                    <button className = \"todo-button save-button\" data-testid = \"todo-item-save-button\" onClick={() => props.onClickSave(props.todoItem.id)}>save</button>\n                    </>\n                : <>\n                    <Link className = \"input-list-items\" data-testid = \"todo-item-value\" to={`todos/${props.todoItem.id}`}>{props.todoItem.value}</Link>\n                    {' '}\n                    <button className = \"todo-button\" data-testid = \"todo-item-edit-button\" onClick={ () => props.onClickEdit(props.todoItem.id)}>edit</button>\n                    {' '}\n                    <button className = \"todo-button\" data-testid = \"todo-item-remove-button\" onClick={ () => props.onClickRemove(props.todoItem.id)}>remove</button>\n                </>\n            }    \n        </li>\n    )\n}","import { useRef, useState } from \"react\";\nimport { v4 as uuidv4 } from 'uuid';\nimport { storeInput } from \"./storage\";\nimport { TodoItem, TodoItemObj } from \"./TodoItem\";\nimport './TodoList.css';\n\nexport function TodoList(){\n    const todoData= storeInput.get(\"todos\") ?? []\n    const inputEl = useRef<HTMLInputElement>(null);\n    const [todos, setTodos] = useState<TodoItemObj[]>(todoData)\n    const [newtodo, setNewTodo] = useState<string>(\"\")\n    const onClickButton = () => {\n        createTodo()\n    }\n    const onChangeNewTodoItem = (e: any) => {\n        setNewTodo(e.target.value)\n    }\n    const onChangeExistingTodoItem = (newValue:string, id: string) => {\n        if(newValue.trim().length === 0){\n            return\n        }\n        const newTodos = todos.map( (todoItem) => todoItem.id === id ? {...todoItem, value: newValue} : todoItem)\n        setAndSortTodos(newTodos)\n    }\n    const onClickRemove = (val: string) => {\n        const newTodos = todos.filter( (valueItem) => valueItem.id !== val)\n        setAndSortTodos(newTodos)\n    }\n    const onClickEdit = (id: string) => {\n        const newTodos = todos.map( (todoItem) => todoItem.id === id ? {...todoItem, isEditing:true} : todoItem)\n        setAndSortTodos(newTodos, false)\n    }\n    const onClickSave = (id:string) =>{\n        editTodo(id)\n    }\n    const onClickDone = (id:string) =>{\n        const newTodos = todos.map( (todoItem) => todoItem.id === id ? {...todoItem, isDone:!todoItem.isDone, updatedAt:new Date().toISOString()} : todoItem)\n        setAndSortTodos(newTodos)\n    }\n    const setAndSortTodos = (todos:TodoItemObj[], addToStorage=true) =>{\n        const sortedTodos = todos.sort((a,b) => {\n            if (a.isDone && !b.isDone){\n                return 1\n            }else if(!a.isDone && b.isDone){\n                return -1\n            }\n            return 0\n        })\n        if(addToStorage){\n            storeInput.add(\"todos\", sortedTodos)\n        }\n        setTodos(sortedTodos)\n    }\n    const createTodo = () =>{\n        if(newtodo.trim().length === 0){\n            return\n        }\n        const newTodos = [...todos, {id:uuidv4(),value:newtodo,isEditing:false,isDone:false,createdAt:new Date().toISOString(), updatedAt:new Date().toISOString()}]\n        setAndSortTodos(newTodos)\n        setNewTodo(\"\")\n        if(inputEl.current){\n            inputEl.current.focus() \n        }\n    }\n    const editTodo = (id:string) => {\n        const newTodos = todos.map( (todoItem) => todoItem.id === id ? {...todoItem, isEditing:false, updatedAt:new Date().toISOString()} : todoItem)\n        setAndSortTodos(newTodos)\n    }\n\n    const onKeyUp = (event:React.KeyboardEvent<HTMLInputElement>) => {\n        if(isKeyEnter(event.key)){\n            createTodo()\n        }\n    }\n\n    const onKeyUpEdit = (key:string, id:string) => {\n        if(isKeyEnter(key)){\n            editTodo(id)\n        }\n    }\n\n    const isKeyEnter = (key:string) => {\n        return key === 'Enter'\n    }\n\n    return (\n        <div>\n            <input className = \"new-todo-input\" data-testid = 'todo-list-new-todo-input' type=\"text\" onKeyUp={onKeyUp} onChange={onChangeNewTodoItem} value={newtodo} ref={inputEl} autoFocus/> \n            <input className = \"create-new-todo-button\" data-testid = 'todo-list-new-todo-button' type=\"submit\" disabled={newtodo.trim().length===0} onClick={onClickButton} value=\"submit\"/>\n            <ul className = \"padding-elements\" data-testid = 'todo-list-container'>\n                { \n                    todos.map( val => <TodoItem \n                        key = {val.id}\n                        todoItem = {val} \n                        onChangeExistingTodoItem = {onChangeExistingTodoItem} \n                        onClickDone = {onClickDone} \n                        onClickEdit = {onClickEdit} \n                        onClickRemove = {onClickRemove} \n                        onClickSave = {onClickSave} \n                        onKeyUpEdit = {onKeyUpEdit}/>) \n                 }\n            </ul>\n        </div> \n    ) ;\n}\n","import { storeInput } from \"./storage\";\nimport { TodoItemObj } from \"./TodoItem\";\n\nclass Repository{\n    getById(id:string){\n        const todos:TodoItemObj[] = storeInput.get(\"todos\") ?? []\n        return todos.find(todoItem => todoItem.id === id)\n    }\n}\n\nexport const repository = new Repository()","import moment from \"moment\";\nimport { Link, useParams } from \"react-router-dom\";\nimport { repository } from \"./repository\";\n\nexport function TodoPage(){\n    let { todoId } = useParams();\n    const todoItem = repository.getById(todoId as string)\n    return(\n        <>\n            <div>Value: {todoItem?.value}</div>\n            <div>Is done: {todoItem?.isDone ? 'Yes' : 'No'}</div>\n            <div>Created at: {moment(todoItem?.createdAt).format('YYYY-MM-DD hh:mm')}</div>\n            <div>Updated at: {moment(todoItem?.updatedAt).format('YYYY-MM-DD hh:mm')}</div>\n            <Link to=\"/\">Go home</Link>\n        </>\n    )\n}","import { Route, Routes } from 'react-router-dom';\nimport './App.css';\nimport { TodoList } from './TodoList';\nimport { TodoPage } from './TodoPage';\n\nfunction App() {\n  return (\n    <div>\n      <header className=\"App-header\">\n      <h1>ToDoList</h1>\n      <Routes>\n        <Route path=\"/\" element={<TodoList />} />\n        <Route path=\"/todos/:todoId\" element={<TodoPage />} />\n      </Routes>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}